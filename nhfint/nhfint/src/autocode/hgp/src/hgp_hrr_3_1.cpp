#include "hgp/hgp_hrr.hpp"
#include <vector>

namespace nhfInt {
namespace hgp {

void hgp_hrr_3_1_(std::vector<double> &a3b1, const std::vector<double> &hrrInp, double x, double y, double z)
{
    const double *a3b0 = hrrInp.data() +  0;
    const double *a4b0 = hrrInp.data() + 10;


    a3b1[ 0] = a4b0[ 0] + x * a3b0[ 0];    //[(300)(100)] = [(400)(000)] + ABx * [(300)(000)]
    a3b1[ 1] = a4b0[ 1] + y * a3b0[ 0];    //[(300)(010)] = [(310)(000)] + ABy * [(300)(000)]
    a3b1[ 2] = a4b0[ 2] + z * a3b0[ 0];    //[(300)(001)] = [(301)(000)] + ABz * [(300)(000)]
    a3b1[ 3] = a4b0[ 1] + x * a3b0[ 1];    //[(210)(100)] = [(310)(000)] + ABx * [(210)(000)]
    a3b1[ 4] = a4b0[ 3] + y * a3b0[ 1];    //[(210)(010)] = [(220)(000)] + ABy * [(210)(000)]
    a3b1[ 5] = a4b0[ 4] + z * a3b0[ 1];    //[(210)(001)] = [(211)(000)] + ABz * [(210)(000)]
    a3b1[ 6] = a4b0[ 2] + x * a3b0[ 2];    //[(201)(100)] = [(301)(000)] + ABx * [(201)(000)]
    a3b1[ 7] = a4b0[ 4] + y * a3b0[ 2];    //[(201)(010)] = [(211)(000)] + ABy * [(201)(000)]
    a3b1[ 8] = a4b0[ 5] + z * a3b0[ 2];    //[(201)(001)] = [(202)(000)] + ABz * [(201)(000)]
    a3b1[ 9] = a4b0[ 3] + x * a3b0[ 3];    //[(120)(100)] = [(220)(000)] + ABx * [(120)(000)]
    a3b1[10] = a4b0[ 6] + y * a3b0[ 3];    //[(120)(010)] = [(130)(000)] + ABy * [(120)(000)]
    a3b1[11] = a4b0[ 7] + z * a3b0[ 3];    //[(120)(001)] = [(121)(000)] + ABz * [(120)(000)]
    a3b1[12] = a4b0[ 4] + x * a3b0[ 4];    //[(111)(100)] = [(211)(000)] + ABx * [(111)(000)]
    a3b1[13] = a4b0[ 7] + y * a3b0[ 4];    //[(111)(010)] = [(121)(000)] + ABy * [(111)(000)]
    a3b1[14] = a4b0[ 8] + z * a3b0[ 4];    //[(111)(001)] = [(112)(000)] + ABz * [(111)(000)]
    a3b1[15] = a4b0[ 5] + x * a3b0[ 5];    //[(102)(100)] = [(202)(000)] + ABx * [(102)(000)]
    a3b1[16] = a4b0[ 8] + y * a3b0[ 5];    //[(102)(010)] = [(112)(000)] + ABy * [(102)(000)]
    a3b1[17] = a4b0[ 9] + z * a3b0[ 5];    //[(102)(001)] = [(103)(000)] + ABz * [(102)(000)]
    a3b1[18] = a4b0[ 6] + x * a3b0[ 6];    //[(030)(100)] = [(130)(000)] + ABx * [(030)(000)]
    a3b1[19] = a4b0[10] + y * a3b0[ 6];    //[(030)(010)] = [(040)(000)] + ABy * [(030)(000)]
    a3b1[20] = a4b0[11] + z * a3b0[ 6];    //[(030)(001)] = [(031)(000)] + ABz * [(030)(000)]
    a3b1[21] = a4b0[ 7] + x * a3b0[ 7];    //[(021)(100)] = [(121)(000)] + ABx * [(021)(000)]
    a3b1[22] = a4b0[11] + y * a3b0[ 7];    //[(021)(010)] = [(031)(000)] + ABy * [(021)(000)]
    a3b1[23] = a4b0[12] + z * a3b0[ 7];    //[(021)(001)] = [(022)(000)] + ABz * [(021)(000)]
    a3b1[24] = a4b0[ 8] + x * a3b0[ 8];    //[(012)(100)] = [(112)(000)] + ABx * [(012)(000)]
    a3b1[25] = a4b0[12] + y * a3b0[ 8];    //[(012)(010)] = [(022)(000)] + ABy * [(012)(000)]
    a3b1[26] = a4b0[13] + z * a3b0[ 8];    //[(012)(001)] = [(013)(000)] + ABz * [(012)(000)]
    a3b1[27] = a4b0[ 9] + x * a3b0[ 9];    //[(003)(100)] = [(103)(000)] + ABx * [(003)(000)]
    a3b1[28] = a4b0[13] + y * a3b0[ 9];    //[(003)(010)] = [(013)(000)] + ABy * [(003)(000)]
    a3b1[29] = a4b0[14] + z * a3b0[ 9];    //[(003)(001)] = [(004)(000)] + ABz * [(003)(000)]
}

} // namespace (hgp)
} // namespace (nhfInt)
